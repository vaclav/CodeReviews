package CodeReview.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class CodeReview__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, "CodeReview.structure.CodeReview");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Boolean> isInProgress_id7bsA$AwCoXZ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isInProgress").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7bsA$AwCoXZ").registry(REGISTRY).build();
  public static final SMethod<Boolean> isForReview_id7bsA$AwC_es = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isForReview").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7bsA$AwC_es").registry(REGISTRY).build();
  public static final SMethod<Boolean> isAccepted_id7bsA$AwC_ld = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isAccepted").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7bsA$AwC_ld").registry(REGISTRY).build();
  public static final SMethod<Boolean> isRejected_id7bsA$AwC_m9 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isRejected").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7bsA$AwC_m9").registry(REGISTRY).build();
  public static final SMethod<Void> progress_id7bsA$AwCHXS = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("progress").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7bsA$AwCHXS").registry(REGISTRY).build();
  public static final SMethod<Void> forReview_id7bsA$AwCPm8 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("forReview").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7bsA$AwCPm8").registry(REGISTRY).build();
  public static final SMethod<Void> accept_id7bsA$AwCPML = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("accept").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7bsA$AwCPML").registry(REGISTRY).build();
  public static final SMethod<Void> reject_id7bsA$AwCPP1 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("reject").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7bsA$AwCPP1").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(isInProgress_id7bsA$AwCoXZ, isForReview_id7bsA$AwC_es, isAccepted_id7bsA$AwC_ld, isRejected_id7bsA$AwC_m9, progress_id7bsA$AwCHXS, forReview_id7bsA$AwCPm8, accept_id7bsA$AwCPML, reject_id7bsA$AwCPP1);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean isInProgress_id7bsA$AwCoXZ(@NotNull SNode __thisNode__) {
    return SPropertyOperations.hasEnumValue(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, 0x72dc9a49a0962551L, "changes"))).last(), MetaAdapterFactory.getProperty(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a09624eeL, 0x72dc9a49a09624fdL, "status"), "In Progress");
  }
  /*package*/ static boolean isForReview_id7bsA$AwC_es(@NotNull SNode __thisNode__) {
    return SPropertyOperations.hasEnumValue(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, 0x72dc9a49a0962551L, "changes"))).last(), MetaAdapterFactory.getProperty(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a09624eeL, 0x72dc9a49a09624fdL, "status"), "For Review");
  }
  /*package*/ static boolean isAccepted_id7bsA$AwC_ld(@NotNull SNode __thisNode__) {
    return SPropertyOperations.hasEnumValue(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, 0x72dc9a49a0962551L, "changes"))).last(), MetaAdapterFactory.getProperty(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a09624eeL, 0x72dc9a49a09624fdL, "status"), "Accepted");
  }
  /*package*/ static boolean isRejected_id7bsA$AwC_m9(@NotNull SNode __thisNode__) {
    return SPropertyOperations.hasEnumValue(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, 0x72dc9a49a0962551L, "changes"))).last(), MetaAdapterFactory.getProperty(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a09624eeL, 0x72dc9a49a09624fdL, "status"), "Rejected");
  }
  /*package*/ static void progress_id7bsA$AwCHXS(@NotNull SNode __thisNode__) {
    SNode statusChange = SLinkOperations.addNewChild(__thisNode__, MetaAdapterFactory.getContainmentLink(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, 0x72dc9a49a0962551L, "changes"), null);
    SPropertyOperations.assign(statusChange, MetaAdapterFactory.getProperty(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a09624eeL, 0x72dc9a49a09624fdL, "status"), "In Progress");
  }
  /*package*/ static void forReview_id7bsA$AwCPm8(@NotNull SNode __thisNode__) {
    SNode statusChange = SLinkOperations.addNewChild(__thisNode__, MetaAdapterFactory.getContainmentLink(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, 0x72dc9a49a0962551L, "changes"), null);
    SPropertyOperations.assign(statusChange, MetaAdapterFactory.getProperty(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a09624eeL, 0x72dc9a49a09624fdL, "status"), "For Review");
  }
  /*package*/ static void accept_id7bsA$AwCPML(@NotNull SNode __thisNode__) {
    SNode statusChange = SLinkOperations.addNewChild(__thisNode__, MetaAdapterFactory.getContainmentLink(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, 0x72dc9a49a0962551L, "changes"), null);
    SPropertyOperations.assign(statusChange, MetaAdapterFactory.getProperty(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a09624eeL, 0x72dc9a49a09624fdL, "status"), "Accepted");
  }
  /*package*/ static void reject_id7bsA$AwCPP1(@NotNull SNode __thisNode__) {
    SNode statusChange = SLinkOperations.addNewChild(__thisNode__, MetaAdapterFactory.getContainmentLink(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a0951f1eL, 0x72dc9a49a0962551L, "changes"), null);
    SPropertyOperations.assign(statusChange, MetaAdapterFactory.getProperty(0xc126621b8cee42a4L, 0x8eb8ffdf4b0da36aL, 0x72dc9a49a09624eeL, 0x72dc9a49a09624fdL, "status"), "Rejected");
  }

  /*package*/ CodeReview__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) isInProgress_id7bsA$AwCoXZ(node));
      case 1:
        return (T) ((Boolean) isForReview_id7bsA$AwC_es(node));
      case 2:
        return (T) ((Boolean) isAccepted_id7bsA$AwC_ld(node));
      case 3:
        return (T) ((Boolean) isRejected_id7bsA$AwC_m9(node));
      case 4:
        progress_id7bsA$AwCHXS(node);
        return null;
      case 5:
        forReview_id7bsA$AwCPm8(node);
        return null;
      case 6:
        accept_id7bsA$AwCPML(node);
        return null;
      case 7:
        reject_id7bsA$AwCPP1(node);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
